# ============================================================================
# DEVELOPMENT ENVIRONMENT ONLY - DO NOT USE IN PRODUCTION
# ============================================================================
# This docker-compose file is specifically designed for local development
# of the Rune API service. It only includes the essential backing services
# (PostgreSQL and Redis) that the API depends on.
#
# The API itself should be run locally on your machine for development,
# allowing for hot-reloading and easier debugging.
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d
#   docker-compose -f docker-compose.dev.yml down
# ============================================================================

services:
  # ============================================================================
  # PostgreSQL Database
  # ============================================================================

  postgres:
    image: "postgres:17-alpine"
    container_name: rune-api-postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-rune}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - rune_dev_network
    restart: unless-stopped

  # ============================================================================
  # Redis Cache - Development Instance
  # ============================================================================
  # In-memory data store for session management and caching
  # Used for storing JWT refresh tokens and temporary data
  redis:
    image: "redis:7-alpine"
    container_name: rune-api-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - rune_dev_network
    restart: unless-stopped

  # ==========================================================================
  # RabbitMQ - Development Instance (management plugin enabled)
  # ==========================================================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rune-api-rabbitmq-dev
    environment:
      # Allow overriding via host env or .env when using docker-compose
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_dev_data:/var/lib/rabbitmq
    networks:
      - rune_dev_network
    restart: unless-stopped

  # ============================================================================
  # TEST SERVICES
  # ============================================================================
  # Separate database instances for running tests in isolation
  # Use different ports to avoid conflicts with dev services

  test-postgres:
    image: postgres:16-alpine
    container_name: rune-api-postgres-test
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_rune
    ports:
      - "5433:5432"
    networks:
      - rune_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_rune"]
      interval: 5s
      timeout: 5s
      retries: 5

  test-redis:
    image: redis:7-alpine
    container_name: rune-api-redis-test
    ports:
      - "6380:6379"
    networks:
      - rune_dev_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

# ============================================================================
# Networks
# ============================================================================
# Isolated network for development services
networks:
  rune_dev_network:
    driver: bridge
    name: rune_api_dev_network

# ============================================================================
# Volumes
# ============================================================================
# Named volumes for persistent data storage during development
# These can be easily removed with: docker volume rm <volume_name>
volumes:
  postgres_dev_data:
    driver: local
    name: rune_api_postgres_dev_data
  redis_dev_data:
    driver: local
    name: rune_api_redis_dev_data
  rabbitmq_dev_data:
    driver: local
    name: rune_api_rabbitmq_dev_data
