// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateUserUsersPostData, CreateUserUsersPostErrors, CreateUserUsersPostResponses, CreateWorkflowWorkflowsPostData, CreateWorkflowWorkflowsPostErrors, CreateWorkflowWorkflowsPostResponses, DeleteUserUsersUserIdDeleteData, DeleteUserUsersUserIdDeleteErrors, DeleteUserUsersUserIdDeleteResponses, DeleteWorkflowWorkflowsWorkflowIdDeleteData, DeleteWorkflowWorkflowsWorkflowIdDeleteErrors, DeleteWorkflowWorkflowsWorkflowIdDeleteResponses, GetAllUsersUsersGetData, GetAllUsersUsersGetResponses, GetUserByIdUsersUserIdGetData, GetUserByIdUsersUserIdGetErrors, GetUserByIdUsersUserIdGetResponses, GetWorkflowWorkflowsWorkflowIdGetData, GetWorkflowWorkflowsWorkflowIdGetErrors, GetWorkflowWorkflowsWorkflowIdGetResponses, ListWorkflowsWorkflowsGetData, ListWorkflowsWorkflowsGetResponses, LoginAuthLoginPostData, LoginAuthLoginPostErrors, LoginAuthLoginPostResponses, LogoutAuthLogoutPostData, LogoutAuthLogoutPostResponses, RefreshAuthRefreshPostData, RefreshAuthRefreshPostErrors, RefreshAuthRefreshPostResponses, UpdateNameWorkflowsWorkflowIdNamePutData, UpdateNameWorkflowsWorkflowIdNamePutErrors, UpdateNameWorkflowsWorkflowIdNamePutResponses, UpdateStatusWorkflowsWorkflowIdStatusPutData, UpdateStatusWorkflowsWorkflowIdStatusPutErrors, UpdateStatusWorkflowsWorkflowIdStatusPutResponses, UpdateUserUsersUserIdPutData, UpdateUserUsersUserIdPutErrors, UpdateUserUsersUserIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * User login
 * Authenticate user with email and password. Returns access and refresh tokens, and sets an HTTP-only cookie.
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh access token
 * Generate a new access token using a valid refresh token. The refresh token remains unchanged.
 */
export const refreshAuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshAuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshAuthRefreshPostResponses, RefreshAuthRefreshPostErrors, ThrowOnError>({
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User logout
 * Logout the current user by revoking their refresh token and clearing the authentication cookie.
 */
export const logoutAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutAuthLogoutPostResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * List Workflows
 */
export const listWorkflowsWorkflowsGet = <ThrowOnError extends boolean = false>(options?: Options<ListWorkflowsWorkflowsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListWorkflowsWorkflowsGetResponses, unknown, ThrowOnError>({
        url: '/workflows/',
        ...options
    });
};

/**
 * Create Workflow
 */
export const createWorkflowWorkflowsPost = <ThrowOnError extends boolean = false>(options: Options<CreateWorkflowWorkflowsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateWorkflowWorkflowsPostResponses, CreateWorkflowWorkflowsPostErrors, ThrowOnError>({
        url: '/workflows/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Workflow
 */
export const deleteWorkflowWorkflowsWorkflowIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkflowWorkflowsWorkflowIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteWorkflowWorkflowsWorkflowIdDeleteResponses, DeleteWorkflowWorkflowsWorkflowIdDeleteErrors, ThrowOnError>({
        url: '/workflows/{workflow_id}',
        ...options
    });
};

/**
 * Get Workflow
 */
export const getWorkflowWorkflowsWorkflowIdGet = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowWorkflowsWorkflowIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowWorkflowsWorkflowIdGetResponses, GetWorkflowWorkflowsWorkflowIdGetErrors, ThrowOnError>({
        url: '/workflows/{workflow_id}',
        ...options
    });
};

/**
 * Update Status
 */
export const updateStatusWorkflowsWorkflowIdStatusPut = <ThrowOnError extends boolean = false>(options: Options<UpdateStatusWorkflowsWorkflowIdStatusPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateStatusWorkflowsWorkflowIdStatusPutResponses, UpdateStatusWorkflowsWorkflowIdStatusPutErrors, ThrowOnError>({
        url: '/workflows/{workflow_id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Name
 */
export const updateNameWorkflowsWorkflowIdNamePut = <ThrowOnError extends boolean = false>(options: Options<UpdateNameWorkflowsWorkflowIdNamePutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateNameWorkflowsWorkflowIdNamePutResponses, UpdateNameWorkflowsWorkflowIdNamePutErrors, ThrowOnError>({
        url: '/workflows/{workflow_id}/name',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all users
 * Retrieve a list of all users in the system
 */
export const getAllUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersUsersGetResponses, unknown, ThrowOnError>({
        url: '/users/',
        ...options
    });
};

/**
 * Create a new user
 * Create a new user account. Email must be unique.
 */
export const createUserUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUsersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserUsersPostResponses, CreateUserUsersPostErrors, ThrowOnError>({
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete user
 * Permanently delete a user from the system.
 */
export const deleteUserUsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserUsersUserIdDeleteResponses, DeleteUserUsersUserIdDeleteErrors, ThrowOnError>({
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Get user by ID
 * Retrieve a single user by their id.
 */
export const getUserByIdUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByIdUsersUserIdGetResponses, GetUserByIdUsersUserIdGetErrors, ThrowOnError>({
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update user
 * Update an existing user's information.
 */
export const updateUserUsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateUserUsersUserIdPutResponses, UpdateUserUsersUserIdPutErrors, ThrowOnError>({
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
