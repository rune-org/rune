// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://services` | (string & {});
};

/**
 * ApiResponse[NoneType]
 */
export type ApiResponseNoneType = {
    /**
     * Success
     * Whether the request was successful
     */
    success?: boolean;
    /**
     * Message
     * Human-readable message
     */
    message?: string;
    /**
     * Data
     * Response data
     */
    data: null;
};

/**
 * ApiResponse[TokenResponse]
 */
export type ApiResponseTokenResponse = {
    /**
     * Success
     * Whether the request was successful
     */
    success?: boolean;
    /**
     * Message
     * Human-readable message
     */
    message?: string;
    /**
     * Response data
     */
    data: TokenResponse;
};

/**
 * ApiResponse[UserResponse]
 */
export type ApiResponseUserResponse = {
    /**
     * Success
     * Whether the request was successful
     */
    success?: boolean;
    /**
     * Message
     * Human-readable message
     */
    message?: string;
    /**
     * Response data
     */
    data: UserResponse;
};

/**
 * ApiResponse[WorkflowDetail]
 */
export type ApiResponseWorkflowDetail = {
    /**
     * Success
     * Whether the request was successful
     */
    success?: boolean;
    /**
     * Message
     * Human-readable message
     */
    message?: string;
    /**
     * Response data
     */
    data: WorkflowDetail;
};

/**
 * ApiResponse[list[UserResponse]]
 */
export type ApiResponseListUserResponse = {
    /**
     * Success
     * Whether the request was successful
     */
    success?: boolean;
    /**
     * Message
     * Human-readable message
     */
    message?: string;
    /**
     * Data
     * Response data
     */
    data: Array<UserResponse>;
};

/**
 * ApiResponse[list[WorkflowListItem]]
 */
export type ApiResponseListWorkflowListItem = {
    /**
     * Success
     * Whether the request was successful
     */
    success?: boolean;
    /**
     * Message
     * Human-readable message
     */
    message?: string;
    /**
     * Data
     * Response data
     */
    data: Array<WorkflowListItem>;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LoginRequest
 */
export type LoginRequest = {
    /**
     * Email
     * User's email address
     */
    email: string;
    /**
     * Password
     * User's password
     */
    password: string;
};

/**
 * RefreshRequest
 */
export type RefreshRequest = {
    /**
     * Refresh Token
     * Valid refresh token
     */
    refresh_token: string;
};

/**
 * TokenResponse
 */
export type TokenResponse = {
    /**
     * Access Token
     * JWT access token
     */
    access_token: string;
    /**
     * Refresh Token
     * Refresh token for obtaining new access tokens
     */
    refresh_token: string;
    /**
     * Token Type
     * Token type, always 'bearer'
     */
    token_type?: string;
    /**
     * Expires In
     * Access token expiration time in seconds
     */
    expires_in: number;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Role
     */
    role?: string;
};

/**
 * UserResponse
 */
export type UserResponse = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email: string;
    /**
     * Role
     */
    role: string;
    /**
     * Is Active
     * Account active status
     */
    is_active: boolean;
    /**
     * Created At
     * Account creation timestamp
     */
    created_at: string;
    /**
     * Updated At
     * Last update timestamp
     */
    updated_at: string;
    /**
     * Last Login At
     * Last login timestamp
     */
    last_login_at?: string | null;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Email
     */
    email: string | null;
    /**
     * Password
     */
    password?: string | null;
    /**
     * Role
     */
    role: string | null;
    /**
     * Is Active
     */
    is_active: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WorkflowCreate
 */
export type WorkflowCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Workflow Data
     */
    workflow_data?: {
        [key: string]: unknown;
    };
};

/**
 * WorkflowDetail
 */
export type WorkflowDetail = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string | null;
    /**
     * Is Active
     */
    is_active: boolean;
    /**
     * Workflow Data
     */
    workflow_data: {
        [key: string]: unknown;
    };
    /**
     * Version
     */
    version: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * WorkflowListItem
 */
export type WorkflowListItem = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Is Active
     */
    is_active: boolean;
};

/**
 * WorkflowUpdateName
 */
export type WorkflowUpdateName = {
    /**
     * Name
     */
    name: string;
};

/**
 * WorkflowUpdateStatus
 */
export type WorkflowUpdateStatus = {
    /**
     * Is Active
     */
    is_active: boolean;
};

export type LoginAuthLoginPostData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginAuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAuthLoginPostError = LoginAuthLoginPostErrors[keyof LoginAuthLoginPostErrors];

export type LoginAuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseTokenResponse;
};

export type LoginAuthLoginPostResponse = LoginAuthLoginPostResponses[keyof LoginAuthLoginPostResponses];

export type RefreshAuthRefreshPostData = {
    body: RefreshRequest;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshAuthRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshAuthRefreshPostError = RefreshAuthRefreshPostErrors[keyof RefreshAuthRefreshPostErrors];

export type RefreshAuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseTokenResponse;
};

export type RefreshAuthRefreshPostResponse = RefreshAuthRefreshPostResponses[keyof RefreshAuthRefreshPostResponses];

export type LogoutAuthLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type LogoutAuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseNoneType;
};

export type LogoutAuthLogoutPostResponse = LogoutAuthLogoutPostResponses[keyof LogoutAuthLogoutPostResponses];

export type ListWorkflowsWorkflowsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/workflows/';
};

export type ListWorkflowsWorkflowsGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseListWorkflowListItem;
};

export type ListWorkflowsWorkflowsGetResponse = ListWorkflowsWorkflowsGetResponses[keyof ListWorkflowsWorkflowsGetResponses];

export type CreateWorkflowWorkflowsPostData = {
    body: WorkflowCreate;
    path?: never;
    query?: never;
    url: '/workflows/';
};

export type CreateWorkflowWorkflowsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateWorkflowWorkflowsPostError = CreateWorkflowWorkflowsPostErrors[keyof CreateWorkflowWorkflowsPostErrors];

export type CreateWorkflowWorkflowsPostResponses = {
    /**
     * Successful Response
     */
    201: ApiResponseWorkflowDetail;
};

export type CreateWorkflowWorkflowsPostResponse = CreateWorkflowWorkflowsPostResponses[keyof CreateWorkflowWorkflowsPostResponses];

export type DeleteWorkflowWorkflowsWorkflowIdDeleteData = {
    body?: never;
    path: {
        /**
         * Workflow Id
         */
        workflow_id: number;
    };
    query?: never;
    url: '/workflows/{workflow_id}';
};

export type DeleteWorkflowWorkflowsWorkflowIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteWorkflowWorkflowsWorkflowIdDeleteError = DeleteWorkflowWorkflowsWorkflowIdDeleteErrors[keyof DeleteWorkflowWorkflowsWorkflowIdDeleteErrors];

export type DeleteWorkflowWorkflowsWorkflowIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteWorkflowWorkflowsWorkflowIdDeleteResponse = DeleteWorkflowWorkflowsWorkflowIdDeleteResponses[keyof DeleteWorkflowWorkflowsWorkflowIdDeleteResponses];

export type GetWorkflowWorkflowsWorkflowIdGetData = {
    body?: never;
    path: {
        /**
         * Workflow Id
         */
        workflow_id: number;
    };
    query?: never;
    url: '/workflows/{workflow_id}';
};

export type GetWorkflowWorkflowsWorkflowIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowWorkflowsWorkflowIdGetError = GetWorkflowWorkflowsWorkflowIdGetErrors[keyof GetWorkflowWorkflowsWorkflowIdGetErrors];

export type GetWorkflowWorkflowsWorkflowIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseWorkflowDetail;
};

export type GetWorkflowWorkflowsWorkflowIdGetResponse = GetWorkflowWorkflowsWorkflowIdGetResponses[keyof GetWorkflowWorkflowsWorkflowIdGetResponses];

export type UpdateStatusWorkflowsWorkflowIdStatusPutData = {
    body: WorkflowUpdateStatus;
    path: {
        /**
         * Workflow Id
         */
        workflow_id: number;
    };
    query?: never;
    url: '/workflows/{workflow_id}/status';
};

export type UpdateStatusWorkflowsWorkflowIdStatusPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateStatusWorkflowsWorkflowIdStatusPutError = UpdateStatusWorkflowsWorkflowIdStatusPutErrors[keyof UpdateStatusWorkflowsWorkflowIdStatusPutErrors];

export type UpdateStatusWorkflowsWorkflowIdStatusPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseWorkflowDetail;
};

export type UpdateStatusWorkflowsWorkflowIdStatusPutResponse = UpdateStatusWorkflowsWorkflowIdStatusPutResponses[keyof UpdateStatusWorkflowsWorkflowIdStatusPutResponses];

export type UpdateNameWorkflowsWorkflowIdNamePutData = {
    body: WorkflowUpdateName;
    path: {
        /**
         * Workflow Id
         */
        workflow_id: number;
    };
    query?: never;
    url: '/workflows/{workflow_id}/name';
};

export type UpdateNameWorkflowsWorkflowIdNamePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateNameWorkflowsWorkflowIdNamePutError = UpdateNameWorkflowsWorkflowIdNamePutErrors[keyof UpdateNameWorkflowsWorkflowIdNamePutErrors];

export type UpdateNameWorkflowsWorkflowIdNamePutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseWorkflowDetail;
};

export type UpdateNameWorkflowsWorkflowIdNamePutResponse = UpdateNameWorkflowsWorkflowIdNamePutResponses[keyof UpdateNameWorkflowsWorkflowIdNamePutResponses];

export type GetAllUsersUsersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type GetAllUsersUsersGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseListUserResponse;
};

export type GetAllUsersUsersGetResponse = GetAllUsersUsersGetResponses[keyof GetAllUsersUsersGetResponses];

export type CreateUserUsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserUsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserUsersPostError = CreateUserUsersPostErrors[keyof CreateUserUsersPostErrors];

export type CreateUserUsersPostResponses = {
    /**
     * Successful Response
     */
    201: ApiResponseUserResponse;
};

export type CreateUserUsersPostResponse = CreateUserUsersPostResponses[keyof CreateUserUsersPostResponses];

export type DeleteUserUsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUserUsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserUsersUserIdDeleteError = DeleteUserUsersUserIdDeleteErrors[keyof DeleteUserUsersUserIdDeleteErrors];

export type DeleteUserUsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteUserUsersUserIdDeleteResponse = DeleteUserUsersUserIdDeleteResponses[keyof DeleteUserUsersUserIdDeleteResponses];

export type GetUserByIdUsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type GetUserByIdUsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByIdUsersUserIdGetError = GetUserByIdUsersUserIdGetErrors[keyof GetUserByIdUsersUserIdGetErrors];

export type GetUserByIdUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUserResponse;
};

export type GetUserByIdUsersUserIdGetResponse = GetUserByIdUsersUserIdGetResponses[keyof GetUserByIdUsersUserIdGetResponses];

export type UpdateUserUsersUserIdPutData = {
    body: UserUpdate;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UpdateUserUsersUserIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserUsersUserIdPutError = UpdateUserUsersUserIdPutErrors[keyof UpdateUserUsersUserIdPutErrors];

export type UpdateUserUsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUserResponse;
};

export type UpdateUserUsersUserIdPutResponse = UpdateUserUsersUserIdPutResponses[keyof UpdateUserUsersUserIdPutResponses];
